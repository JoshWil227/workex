
/**
 * This class handles all of the user-input data and sorts it into either a number, symbol, or
 * string.
 * 
 * @author zhac109
 */
public class Entry {

  double number;

  Symbol other;

  String str;

  Type type;

  /**
   * The constructor for a Number entry.
   * 
   * @param value the number entered by the user.
   */
  
  public Entry(double value) { // was changed from float to double as there is no "." symbol and
    number = value; // therefore cannot do decimals without switching to double
    type = Type.NUMBER;
  }

  /**
   * The constructor for a Symbol entry.
   * 
   * @param which the symbol entered by the user.
   */

  public Entry(Symbol which) {
    other = which;
    type = Type.SYMBOL;
  }

  /**
   * The constructor for a String entry.
   * 
   * @param word the String entered by the user.
   */
  
  public Entry(String word) {
    str = word;
    type = Type.STRING;
  }


  /**
   * Returns the Type of the Entry.
   * 
   * @return the type of the Entry.
   */

  public String getType() {
    return type.toString(); // returns the string of the type.
  }

  /**
   * Returns the String if the Entry is of type string. If not it throws BadTypeExcpetion.
   * 
   * @return the string contained in this Entry.
   * @throws BadTypeException if not a string.
   */

  public String getString() throws BadTypeException {
    if (type != Type.STRING) { // throws exception if not a string type
      throw new BadTypeException(null);
    } else {
      return str;
    }
  }

  /**
   * Returns the Symbol if the Entry is of type symbol. If not it throws BadTypeException.
   * 
   * @return the symbol contained in this Entry.
   * @throws BadTypeException if not a symbol.
   */

  public Symbol getSymbol() throws BadTypeException {
    if (type != Type.SYMBOL) { // throws exception if not a symbol type
      throw new BadTypeException(null);
    } else {
      return other;
    }
  }

  /**
   * Returns the double if the Entry is of type number. If not it throws BadTypeException.
   * 
   * @return the double contained in this Entry.
   * @throws BadTypeException if not a number.
   */
  
  public double getValue() throws BadTypeException {
    if (type != Type.NUMBER) { // throws exception if not a number type
      throw new BadTypeException(null);
    } else {
      return number;
    }
  }

  /**
   * Creates a different hash code for each entry of a different type or value.
   */

  @Override
  public int hashCode() { // Autogenerated after checking on Piazza that it was allowed
    final int prime = 31; // the first prime to be multiplied
    int result = 1; // the value to be returned (iteratively)
    long temp; // temporary value used to bit shift the result.
    temp = Double.doubleToLongBits(number);
    result = prime * result + (int) (temp ^ (temp >>> 32)); //
    result = prime * result + ((other == null) ? 0 : other.hashCode());
    result = prime * result + ((str == null) ? 0 : str.hashCode());
    result = prime * result + ((type == null) ? 0 : type.hashCode());
    return result;
  }

  /**
   * Checks whether two entries are equal.
   */
  
  @Override
  public boolean equals(Object obj) { // Autogenerated after checking on Piazza that it was allowed
    if (this == obj) { // if the object is passed into its own equals method, return true
      return true;
    }
    if (obj == null) { // if a null object is passed in return false
      return false;
    }
    if (getClass() != obj.getClass()) { // if the object is not an entry return false.
      return false;
    }
    Entry other = (Entry) obj;
    if (Double.doubleToLongBits(number) != Double.doubleToLongBits(other.number)) {
      // if both are of type number but don't have the same value stored, return false
      return false;
    }
    if (this.other != other.other) {
      // if both are type symbol but don't have the same symbol stored, return false
      return false;
    }
    if (str == null) {
      if (other.str != null) { // if this entry has a string but the other doesn't, return false
        return false;
      }
    } else if (!str.equals(other.str)) {
      // if both have strings but not the same string, return false
      return false;
    }
    if (type != other.type) { // if they are not the same type, return false
      return false;
    }
    return true;
  }
}
